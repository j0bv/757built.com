name: 757Built CI/CD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
  schedule:
    - cron: "0 */6 * * *"  # run every 6 hours to ingest new data

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r Agent/requirements.txt
          pip install pytest pytest-cov
      - name: Run unit tests with coverage
        run: |
          cd Agent
          python -m pytest tests/ --cov=. --cov-report=xml
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: Agent/coverage.xml

  build-frontend:
    runs-on: ubuntu-latest
    needs: backend-tests
    steps:
      - uses: actions/checkout@v4
      - name: Upload static site artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: public_html/Adminator-admin-dashboard-master

  deploy-pages:
    if: github.ref == 'refs/heads/main'
    needs: build-frontend
    permissions:
      pages: write
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v3

  deploy-to-cpanel:
    if: github.ref == 'refs/heads/main'
    needs: [backend-tests, build-frontend]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to cPanel hosting
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.CPANEL_SERVER }}
          username: ${{ secrets.CPANEL_USERNAME }}
          password: ${{ secrets.CPANEL_PASSWORD }}
          server-dir: ${{ secrets.CPANEL_SERVER_DIR }}/
          local-dir: ./public_html/
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
            README.md
      
      - name: Deploy to secondary cPanel hosting
        if: github.event.repository.name == '757built.com' # Only run for the main repo
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.SECOND_CPANEL_SERVER }}
          username: ${{ secrets.SECOND_CPANEL_USERNAME }}
          password: ${{ secrets.SECOND_CPANEL_PASSWORD }}
          server-dir: ${{ secrets.SECOND_CPANEL_SERVER_DIR }}/
          local-dir: ./public_html/
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
            README.md

  publish-ipns:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [backend-tests, deploy-pages, deploy-to-cpanel]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install ipfshttpclient
        run: pip install ipfshttpclient requests
      - name: Publish latest data to IPNS
        env:
          GRAPH_IPNS_KEY: ${{ secrets.GRAPH_IPNS_KEY }}
          IPFS_API: ${{ secrets.IPFS_API }}
        run: |
          cat > publish_ipns.py << 'EOF'
          import os
          import json
          import ipfshttpclient
          import pathlib
          import time
          import requests

          def publish_to_ipns(file_path, client):
              if not file_path.exists():
                  print(f'{file_path} not found; skipping')
                  return
                  
              # Add file to IPFS
              res = client.add(str(file_path))
              cid = res['Hash']
              
              # Publish to IPNS with retry logic
              max_retries = 3
              for attempt in range(max_retries):
                  try:
                      client.name.publish(f"/ipfs/{cid}", key=os.environ['GRAPH_IPNS_KEY'])
                      print(f'Successfully published {file_path} with CID {cid}')
                      return
                  except Exception as e:
                      if attempt == max_retries - 1:
                          raise
                      print(f'Attempt {attempt + 1} failed, retrying...')
                      time.sleep(5)

          try:
              # Connect to IPFS node
              client = ipfshttpclient.connect(os.environ['IPFS_API'])
              
              # Publish graph data
              graph_path = pathlib.Path('data/graph_data.json')
              publish_to_ipns(graph_path, client)
              
              # Publish any other relevant data files
              for data_file in pathlib.Path('data').glob('*.json'):
                  if data_file != graph_path:
                      publish_to_ipns(data_file, client)
                      
          except Exception as e:
              print(f'Error during IPNS publishing: {str(e)}')
              raise
          EOF
          python publish_ipns.py
